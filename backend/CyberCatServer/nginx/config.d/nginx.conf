# Не используй 80-й порт для проверки на localhost.
# 80-ый порт переопределяется конфигурацией default.conf внутри nginx контейнера.
# В контейнере конфигурация должны быть по пути /etc/nginx/conf.d

# Для тестов на localhost. Не забудь указать правильный порт в docker-compose.yml.
server {
    listen 100;
    server_name localhost; # Если сюда вписываешь localhost, меняй порт на другой. Почему? Читай комментарий в заголовке.

    # Все остальные запросы редиректим на https аналог.
    location / {
        # Редиректь все запросы на какой-то нибудь сервис для тестов. api-gateway - имя контейнера, в котором развернут сервис.
        # proxy_pass http://api-gateway:5000;
    }

    # Проверка, что nginx запущен и работает.
    location /nginx/health {
        add_header Content-Type text/plain;
        return 200 'healthy';
    }
}

# Сервер для небезопасных http соеденений.
server {
    listen 80;

    server_name server.cyber-cat.pro; # Если сюда вписываешь localhost, меняй порт на другой. Почему? Читай комментарий в заголовке.
    server_tokens off; # Не показываем, что у нас nginx.

    # Открываем директорию, которую нужно открыть для cert бота, чтобы он проверил сайт для сертификата.
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Все остальные запросы редиректим на https аналог.
    location / {
        return 301 https://$host$request_uri;
    }

    # Проверка, что nginx запущен и работает.
    location /nginx/health {
        add_header Content-Type text/plain;
        return 200 'healthy';
    }
}

# Сервер для безопасных https соеденений.
server {
    listen 443 default_server ssl http2;
    #listen [::]:443 ssl http2;

    server_name server.cyber-cat.pro;

    # Путь к сертификату, сюда его положит certbot после проверки.
    ssl_certificate /etc/letsencrypt/live/server.cyber-cat.pro/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/server.cyber-cat.pro/privkey.pem;

    location / {
        # Добавляем заголовки CORS. Копировал вставил из https://enable-cors.org/server_nginx.html
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }

        proxy_pass http://api-gateway:5000;
    }

    location /nginx/health {
        add_header Content-Type text/plain;
        return 200 'healthy';
    }
}

